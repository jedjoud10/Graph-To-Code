
float4x4 matrix_0;
float inj_0;
float inj_1;
float inj_2;
RWTexture3D<float> voxels_write;
RWTexture3D<float3> colors_write;
RWTexture3D<float2> uvs_write;
int size;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Compute/Noises.cginc"
#include "Assets/Compute/SDF.cginc"
#include "Assets/Compute/Other.cginc"

float3 ConvertIntoWorldPosition(float3 tahini) {
    return  (tahini + offset) * scale;
}

float3 ConvertFromWorldPosition(float3 worldPos) {
    return  (worldPos / scale) - offset;
}
// defined nodes: 16, depth: 0, index: 0, total lines: 12, argument count: 3 
void Voxel(float3 position, out float voxel, out float3 color) {
	float3 projected_0 = mul(matrix_0, float4(position, 1.0)).xyz;
	float3 projected2_0 = projected_0;
	float projected2_0_swizzled_0 = projected2_0.y;
	float2 projected2_0_swizzled_1 = projected2_0.xz;
	float projected2_0_swizzled_1_noised_0 = (snoise((projected2_0_swizzled_1) * inj_1)) * inj_0;
	float projected2_0_swizzled_0_op_projected2_0_swizzled_1_noised_0_0 = projected2_0_swizzled_0 + projected2_0_swizzled_1_noised_0;
	float projected2_0_swizzled_0_op_inj_2_0 = projected2_0_swizzled_0 / inj_2;
	const float c_0 = 0.5;
	float projected2_0_swizzled_0_op_inj_2_0_op_c_0_0 = projected2_0_swizzled_0_op_inj_2_0 * c_0;
	const float c_1 = 0.5;
	float projected2_0_swizzled_0_op_inj_2_0_op_c_0_0_op_c_1_0 = projected2_0_swizzled_0_op_inj_2_0_op_c_0_0 + c_1;
	float3 projected2_0_swizzled_0_op_inj_2_0_op_c_0_0_op_c_1_0_swizzled_0 = projected2_0_swizzled_0_op_inj_2_0_op_c_0_0_op_c_1_0.xxx;
	voxel = projected2_0_swizzled_0_op_projected2_0_swizzled_1_noised_0_0;
	color = projected2_0_swizzled_0_op_inj_2_0_op_c_0_0_op_c_1_0_swizzled_0;
}


#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
// Name: CSVoxel, Scope name: Voxel, Scope index: 0, Outputs: 2, Arguments: 3
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    uint3 remapped = uint3(id.xyz);
    //float3 position = (float3(remapped * 1) + offset) * scale
    float3 position = ConvertIntoWorldPosition(float3(remapped) * 1);
    float voxel;
    float3 color;
    Voxel(position,voxel,color);
    voxels_write[id.xyz] = voxel;
    colors_write[id.xyz] = color;

}