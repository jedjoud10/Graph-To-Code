
RWTexture2D<float> _5_write;
Texture2D _5_read;
SamplerState sampler_5_read;
float _6;
float _7;
float _8;
float4x4 _9;
float _13;
float _18;
float _19;
Texture1D _27_read;
SamplerState sampler_27_read;
float4x4 _33;
float _38;
float _39;
float _40;
float4x4 _43;
float _48;
float _49;
float _57;
float _62;
float _63;
float _71;
Texture1D _76_read;
SamplerState sampler_76_read;
float4x4 _82;
float _93;
float _94;
Texture1D _96_read;
SamplerState sampler_96_read;
float2 _106;
float2 _107;
Texture2D _108_read;
SamplerState sampler_108_read;
RWTexture3D<float> voxels_write;
RWTexture3D<float3> colors_write;
int size;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Compute/Noises.cginc"
#include "Assets/Compute/SDF.cginc"
#include "Assets/Compute/Other.cginc"
// defined nodes: 26, depth: 1, index: 0, total lines: 24, argument count: 3 
void _4(float3 position,uint3 id, out float _4_output) {
	float3 _10 = mul(_9, float4(position, 1.0)).xyz;
	float3 _11 = _10;
	float2 _12 = _11.xz;
	float _14 = 0.0;
	float _15 = 1.0;
	float _16 = 1.0;
	[unroll]
	for(uint i = 0; i < 5; i++) {
		float2 _17 = _12 * _15 + hash21(float(i) * 6543.26912) * 2366.5437;
		float2 _20 = _15.xx;
		float2 _21 = _17 * _20;
		float _22 = (cellular((_21) * _19).x - 0.5) * _18;
		float _23 = _22;
		float _24 = _23 * _16;
		float _25 = _14 + _24;
		_14 = _25;
		_15 *= _8;
		_16 *= _13;
	}
	float _26 = _14;
	float _28 = Remap(_26, _6, _7, 0.0, 1.0);
	float _29 = _27_read.SampleLevel(sampler_27_read, _28, 0).x;
	float _30 = Remap(_29, 0.0, 1.0, _6, _7);
	float _31 = _30;
	_4_output = _31;
}

// defined nodes: 82, depth: 0, index: 1, total lines: 73, argument count: 4 
void Voxel(float3 position,uint3 id, out float voxel, out float3 color) {
	const float3 _1 = float3(1,1,1);
	const float3 _2 = float3(0,0,0);
	const float _3 = 0;
	float _32 = SampleBounded(_5_read, sampler_5_read, (float2(id.xz) / size) * _1.xz + _2.xz, _3, (float(size) / 1)).x;
	float3 _34 = mul(_33, float4(position, 1.0)).xyz;
	float3 _35 = _34;
	float _36 = _35.y;
	float _37 = _32 + _36;
	const float2 _41 = float2(1.0,1.0);
	const float2 _42 = float2(1.0,1.0);
	float3 _44 = mul(_43, float4(_35, 1.0)).xyz;
	float3 _45 = _44;
	float2 _46 = _45.xz;
	float2 _47 = ((_46 + float3(123.8544f, 32.22354f, -359.4854f).xy) * _41.x);
	float _50 = (snoise((_47) * _49)) * _48;
	float _51 = (_46.x + _50 * _42.x);
	float2 _52 = ((_46 + float3(65.4238f, -551.1535f, 159.5435f).xy) * _41.y);
	float _53 = (snoise((_52) * _49)) * _48;
	float _54 = (_46.y + _53 * _42.y);
	float2 _55 = float2(_51,_54);
	float2 _56 = _55;
	float _58 = 0.0;
	float _59 = 1.0;
	float _60 = 1.0;
	[unroll]
	for(uint i = 0; i < 4; i++) {
		float2 _61 = _56 * _59 + hash21(float(i) * 6543.26912) * 2366.5437;
		float2 _64 = _59.xx;
		float2 _65 = _61 * _64;
		float _66 = (snoise((_65) * _63)) * _62;
		float _67 = _66;
		float _68 = _67 * _60;
		float _69 = _58 + _68;
		_58 = _69;
		_59 *= _40;
		_60 *= _57;
	}
	float _70 = _58;
	float _72 = _70 - _71;
	const float _73 = 0;
	float _74 = min(_72,_73);
	float _75 = (-(_74));
	float _77 = Remap(_75, _38, _39, 0.0, 1.0);
	float _78 = _76_read.SampleLevel(sampler_76_read, _77, 0).x;
	float _79 = Remap(_78, 0.0, 1.0, _38, _39);
	float _80 = _79;
	float _81 = _37 - _80;
	float3 _83 = mul(_82, float4(_35, 1.0)).xyz;
	float3 _84 = _83;
	const float3 _85 = float3(10,10,10);
	float _86 = sdBox(_84, _85);
	const float _87 = 0.2;
	const float _88 = 0.4;
	float _89 = (snoise((_84) * _88)) * _87;
	float _90 = _86 + _89;
	float _91 = opUnion(_81, _90);
	float _92 = _91;
	float _95 = _35.y;
	float _97 = Remap(_95, _93, _94, 0.0, 1.0);
	float3 _98 = _96_read.SampleLevel(sampler_96_read, _97, 0).xyz;
	float3 _99 = _98;
	const float3 _100 = float3(0.2,0.2,0.2);
	float3 _101 = _80.xxx;
	float3 _102 = lerp(_99,_100,clamp(_101, 0.0, 1.0));
	const float3 _103 = float3(0,0,0);
	float2 _104 = _35.xz;
	const float _105 = 0;
	float4 _109 = _108_read.SampleLevel(sampler_108_read, _104 * _106 + _107, _105);
	float _110 = _109.x;
	const float _111 = 10;
	float _112 = _110 * _111;
	float3 _113 = _112.xxx;
	float3 _114 = lerp(_102,_103,clamp(_113, 0.0, 1.0));
	voxel = _92;
	color = _114;
}


#pragma kernel CS_4
[numthreads(32, 32, 1)]
// Name: CS_4, Scope name: _4, Scope index: 1, Outputs: 1, Arguments: 3
void CS_4(uint3 id : SV_DispatchThreadID) {
    uint3 remapped = uint3(id.x, 0.0, id.y);
    float3 position = (float3(remapped * 1) + offset) * scale;
    float _4_output;
    _4(position,id,_4_output);
    _5_write[id.xy] = _4_output;

}

#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
// Name: CSVoxel, Scope name: Voxel, Scope index: 0, Outputs: 2, Arguments: 4
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    uint3 remapped = uint3(id.xyz);
    float3 position = (float3(remapped * 1) + offset) * scale;
    float voxel;
    float3 color;
    Voxel(position,id,voxel,color);
    voxels_write[id.xyz] = voxel;
    colors_write[id.xyz] = color;

}