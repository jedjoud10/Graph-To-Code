
RWTexture2D<float> _5_write;
Texture2D _5_read;
SamplerState sampler_5_read;
float _6;
float _7;
float _8;
float4x4 _9;
float _12;
float _17;
float _18;
Texture1D _21_read;
SamplerState sampler_21_read;
float4x4 _27;
float _31;
RWTexture3D<float> voxels;
int size;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Compute/Noises.cginc"
#include "Assets/Compute/Other.cginc"
// defined nodes: 19, depth: 1, total lines: 18 
float _4(float3 position, uint3 id) {
	float3 _10 = mul(_9, float4(position, 1.0));
	float2 _11 = _10.xz;
	float _13 = 0.0;
	float _14 = 1.0;
	float _15 = 1.0;
	[unroll]
	for(uint i = 0; i < 3; i++) {
		float2 _16 = _11 * _14 + hash31(float(i));
		float _19 = (snoise((_16) * _18)) * _17;
		_13 += abs(_19) * _15;
		_14 *= _8;
		_15 *= _12;
	}
	float _20 = _13;
	float _22 = Remap(_20, _6, _7, 0.0, 1.0);
	float _23 = _21_read.SampleLevel(sampler_21_read, _22, 0);
	float _24 = Remap(_23, 0.0, 1.0, _6, _7);
	float4 _25 = _24;
	return _25;
}

// defined nodes: 10, depth: 0, total lines: 8 
float Voxel(float3 position, uint3 id) {
	const float3 _1 = float3(1,1,1);
	const float3 _2 = float3(0,0,0);
	const float _3 = 0;
	float _26 = SampleBounded(_5_read, sampler_5_read, (float2(id.xz) / size) * _1 + _2.xz, _3, (float(size) / 1)).x;
	float3 _28 = mul(_27, float4(position, 1.0));
	float _29 = _28.y;
	float _30 = _26 + _29;
	float _32 = _30 * _31;
	return _32;
}


#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    voxels[id] = Voxel((float3(id) + offset) * scale, id);
}

#pragma kernel CS_4
[numthreads(8, 8, 1)]
void CS_4(uint3 id : SV_DispatchThreadID) {
    uint3 remapped = uint3(id.x, 0.0, id.y);

    _5_write[id.xy] = _4((float3(remapped * 1) + offset) * scale, id);
}