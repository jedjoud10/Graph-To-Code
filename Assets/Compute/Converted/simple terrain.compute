
float4x4 _1;
float _5;
float _6;
float _9;
float _12;
float _13;
float _16;
RWTexture3D<float> voxels;
RWTexture3D<float3> colors;
int size;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Compute/Noises.cginc"
#include "Assets/Compute/Other.cginc"
#include "Assets/Compute/SDF.cginc"
// defined nodes: 19, depth: 0, total lines: 11, argument count: 4 
void Voxel( float3 position, uint3 id, out float voxel, out float3 color) {
	float3 _2 = mul(_1, float4(position, 1.0)).xyz;
	float3 _3 = _2;
	float _4 = _3.y;
	float2 _7 = _3.xz;
	float _8 = (snoise((_7) * _6)) * _5;
	float _10 = sqrt(pow(_8,2.0) + _9);
	float _11 = _4 + _10;
	float _14 = (snoise((_3) * _13)) * _12;
	float _15 = _11 + _14;
	float _17 = _10 / _16;
	float3 _18 = _17.xxx;
	voxel = _15;
	color = _18;
}


#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    float density;
    float3 color;
    Voxel((float3(id) + offset) * scale, id, density, color);
    voxels[id] = density;
    colors[id] = color;
}