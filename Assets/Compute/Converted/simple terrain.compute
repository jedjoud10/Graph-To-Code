
float _1;
float _2;
float4x4 _3;
float _9;
float _10;
float _13;
float _16;
float3 _22;
float3 _24;
float _27;
float _28;
float _29;
float _34;
RWTexture3D<float> voxels_write;
RWTexture3D<float3> colors_write;
int size;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Compute/Noises.cginc"
#include "Assets/Compute/SDF.cginc"
#include "Assets/Compute/Other.cginc"
// defined nodes: 5, depth: 1, index: 0, total lines: 23, argument count: 2 
void _26(float3 _25, out float _26_sdf_output) {
	
	float3 posCell = floor(_25);
	float3 posFrac = frac(_25);
	
	float output = 100.0;
	
	
	for(int z = -1; z <= 1; z++)
	for(int y = -1; y <= 1; y++)
	for(int x = -1; x <= 1; x++) {
	
	    float3 cell = float3(x, y, z) + posCell;
	    float3 tiled = fmod(cell, 16);
	    float3 randomOffset = hash33(tiled);
	
	
	    if (_29 > 0.0) {
	        float3 checkingPos = cell + randomOffset;
	        output = min(output, distance(checkingPos, _25));
	    }
	}
	
	float _30 = min(output, 1) * _28 + _27;
	_26_sdf_output = _30;
}

// defined nodes: 32, depth: 0, index: 1, total lines: 23, argument count: 4 
void Voxel(float3 position,uint3 id, out float voxel, out float3 color) {
	float3 _4 = mul(_3, float4(position, 1.0)).xyz;
	float3 _5 = _4;
	float _6 = (snoise((_5) * _2)) * _1;
	float _7 = _5.y;
	float _8 = _6 + _7;
	float2 _11 = _5.xz;
	float _12 = (snoise((_11) * _10)) * _9;
	float _14 = sqrt(pow(_12,2.0) + _13);
	float _15 = _8 + _14;
	const float _17 = 2;
	float _18 = _16 / _17;
	float _19 = _15 - _18;
	float _20 = opUnion(_19, _7);
	float _21 = _20;
	float3 _23 = _5 * _22;
	float3 _25 = _23 + _24;
    float _26_sdf_output;
    _26(_25,_26_sdf_output);
	float _31 = _26_sdf_output;
	float _32 = opIntersection(_21, _31);
	float _33 = _32;
	float _35 = _14 / _34;
	float3 _36 = _35.xxx;
	voxel = _33;
	color = _36;
}


#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
// Name: CSVoxel, Scope name: Voxel, Scope index: 0, Outputs: 2, Arguments: 4
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    uint3 remapped = uint3(id.xyz);
    float3 position = (float3(remapped * 1) + offset) * scale;
    float voxel;
    float3 color;
    Voxel(position,id,voxel,color);
    voxels_write[id.xyz] = voxel;
    colors_write[id.xyz] = color;

}