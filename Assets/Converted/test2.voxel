
#pragma kernel CSVoxel
SamplerState my_trilinear_clamp_sampler;
RWTexture3D<float> _3_write;
Texture3D _3_read;
SamplerState sampler_3_read;
float _11;
float _12;
float _16;
float _17;
float _22;
RWTexture3D<float> voxels;
int size;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Noises.cginc"
#include "Assets/SDF.cginc"
// defined nodes: 12, depth: 1, total lines: 15 
float _2(float3 position, uint3 id) {
	const float _4 = 2;
	float2 _5 = position.xz;
	const float _6 = 0.5;
	float _7 = 0.0;
	float _8 = 1.0;
	float _9 = 1.0;
	[unroll]
	for(uint i = 0; i < 2; i++) {
		_8 *= _4;
		_9 *= _6;
		float2 _10 = _5 * _8 + hash31(float(i));
		float _13 = (snoise((_10) * _12)) * _11;
		_7 += abs(_13) * _9;
		}
	float _14 = _7;
	return _14;
}

// defined nodes: 11, depth: 0, total lines: 7 
float Voxel(float3 position, uint3 id) {
	const float _1 = 1;
	float _15 = _3_read.SampleLevel(sampler_3_read, (float3(id) / size) * _1, 0).x;
	float _18 = (snoise((position) * _17)) * _16;
	float _19 = _15 + _18;
	float _20 = position.y;
	float _21 = _19 + _20;
	float _23 = _21 * _22;
	return _23;
}


#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    voxels[id] = Voxel((float3(id) + offset) * scale, id);
}

#pragma kernel CS_2
[numthreads(8, 8, 8)]
void CS_2(uint3 id : SV_DispatchThreadID) {
    _3_write[id] = _2((float3(id * 4) + offset) * scale, id);
}