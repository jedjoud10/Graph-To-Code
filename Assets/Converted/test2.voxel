
#pragma kernel CSVoxel
float inj_0;
float inj_1;
float inj_2;
float inj_3;
RWTexture3D<float> voxels;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Noises.cginc"
#include "Assets/SDF.cginc"
void Func(float3 position, out float density) {
const float c_0 = 0.5;
const float c_1 = 2;
float2 position_swizzle_0 = position.xz;
const float c_2 = 1;
const float c_3 = 1;
float position_swizzle_0_fbm_0 = 0.0;
float position_swizzle_0_fbm_scale_0 = 1.0;
float position_swizzle_0_fbm_amplitude_0 = 1.0;
[unroll]
for(uint i = 0; i < 1; i++) {
position_swizzle_0_fbm_scale_0 *= c_1;
position_swizzle_0_fbm_amplitude_0 *= c_0;
float2 position_swizzle_0_fmb_pos_0 = position_swizzle_0 * position_swizzle_0_fbm_scale_0 + hash31(float(i));
float position_swizzle_0_fmb_pos_0_noised_0 = (cellular((position_swizzle_0_fmb_pos_0) * inj_0).x - 0.5) * inj_1;
position_swizzle_0_fbm_0 += position_swizzle_0_fmb_pos_0_noised_0 * position_swizzle_0_fbm_amplitude_0;
}
float position_swizzle_0_fbm_1 = position_swizzle_0_fbm_0;
float position_swizzle_1 = position.y;
float position_swizzle_1_op_position_swizzle_0_fbm_1_0 = position_swizzle_1 + position_swizzle_0_fbm_1;
float position_swizzle_1_op_position_swizzle_0_fbm_1_0_op_inj_2_0 = position_swizzle_1_op_position_swizzle_0_fbm_1_0 + inj_2;
float position_swizzle_1_op_position_swizzle_0_fbm_1_0_op_inj_2_0_op_inj_3_0 = position_swizzle_1_op_position_swizzle_0_fbm_1_0_op_inj_2_0 * inj_3;
density = position_swizzle_1_op_position_swizzle_0_fbm_1_0_op_inj_2_0_op_inj_3_0;
}

#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    float density = 0.0;
    Func((float3(id) + offset) * scale, density);
    voxels[id] = density;
}