
float3 _2;
RWTexture3D<float> _5_write;
Texture3D _5_read;
SamplerState sampler_5_read;
float _13;
float _14;
float _18;
float _19;
float _24;
RWTexture3D<float> voxels;
int size;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Noises.cginc"
#include "Assets/Other.cginc"
#include "Assets/SDF.cginc"
// defined nodes: 12, depth: 1, total lines: 15 
float _4(float3 position, uint3 id) {
	const float _6 = 2;
	float2 _7 = position.xz;
	const float _8 = 0.5;
	float _9 = 0.0;
	float _10 = 1.0;
	float _11 = 1.0;
	[unroll]
	for(uint i = 0; i < 1; i++) {
		_10 *= _6;
		_11 *= _8;
		float2 _12 = _7 * _10 + hash31(float(i));
		float _15 = (snoise((_12) * _14)) * _13;
		_9 += _15 * _11;
	}
	float _16 = _9;
	return _16;
}

// defined nodes: 13, depth: 0, total lines: 8 
float Voxel(float3 position, uint3 id) {
	const float3 _1 = float3(1,1,1);
	const float _3 = 0;
	float _17 = SampleBicubic(_5_read, sampler_5_read, (float3(id) / size) * _1, _3, (float3(1.0,1.0,1.0) * size / 1)).x;
	float _20 = (snoise((position) * _19)) * _18;
	float _21 = _17 + _20;
	float _22 = position.y;
	float _23 = _21 + _22;
	float _25 = _23 * _24;
	return _25;
}


#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    voxels[id] = Voxel((float3(id) + offset) * scale, id);
}

#pragma kernel CS_4
[numthreads(8, 8, 8)]
void CS_4(uint3 id : SV_DispatchThreadID) {
    _5_write[id] = _4((float3(id * 1) + offset) * scale, id);
}